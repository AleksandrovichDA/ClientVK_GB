//
//  MessagesViewController.swift
//  iMessage
//
//  Created by Denis on 29.11.2017.
//  Copyright Â© 2017 GBSWIFT. All rights reserved.
//

import UIKit
import RealmSwift
import Messages

class MessagesViewController: MSMessagesAppViewController, UITableViewDelegate, UITableViewDataSource {
    
    @IBOutlet weak var newsfeed: UITableView!
    
    var config : Realm.Configuration?
    var newsfeedRealm : Results<Newsfeed>?
    var token : NotificationToken?
    lazy var servide = Service(container: newsfeed)
    let realm = Realm.Configuration(fileURL: FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: "group.lastNews")?.appendingPathComponent("default.realm"))
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        let fileURL = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: "group.lastNews")!.appendingPathComponent("default.realm")
        config = Realm.Configuration(fileURL: fileURL)
        pairTableAndRealm()
        newsfeed.delegate = self
        newsfeed.dataSource = self
        newsfeed.estimatedRowHeight = 360
        newsfeed.rowHeight = UITableViewAutomaticDimension
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    func pairTableAndRealm() {
        guard let realm = try? Realm(configuration: self.config!) else { return }
        newsfeedRealm = realm.objects(Newsfeed.self)
        token = newsfeedRealm?.observe{ [weak self] (changes: RealmCollectionChange) in
            guard let tableView = self?.newsfeed else { return }
            switch changes {
            case .initial:
                tableView.reloadData()
            case .update(_, let deletions, let insertions, let modifications):
                tableView.beginUpdates()
                tableView.insertRows(at: insertions.map({ IndexPath( row: $0, section: 0) }), with: .none)
                tableView.deleteRows(at: deletions.map({ IndexPath( row: $0, section: 0) }), with: .none)
                tableView.reloadRows(at: modifications.map({ IndexPath( row: $0, section: 0) }), with: .none)
                tableView.endUpdates()
            case .error(let error):
                fatalError("\(error)")
            }
        }
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return newsfeedRealm?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "NewsViewMessageCell", for: indexPath) as! NewsViewMessageCell
        guard let newsfeed = newsfeedRealm?[indexPath.row] else {
            cell.nameGroup.text = ""
            cell.textNews.text = ""
            cell.photo.image = nil
            cell.photoNews.image = nil
            return cell
        }
        cell.nameGroup.text = newsfeed.header
        cell.textNews.text = newsfeed.textBody
        
        if newsfeed.attachPhoto.count > 0 {
            cell.photoNews.image = servide.photo(atIndexpath: indexPath, byUrl: newsfeed.attachPhoto[0].photoURL)
        }
        cell.photo.image = servide.photo(atIndexpath: indexPath, byUrl: newsfeed.groupPhotoURL)
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        guard let selectIndexPath = tableView.indexPathForSelectedRow else {
            return
        }
        let layout = MSMessageTemplateLayout()
        let selectRow = tableView.cellForRow(at: selectIndexPath)! as! NewsViewMessageCell
        
        layout.caption = selectRow.nameGroup.text
        if let photo = selectRow.photoNews?.image {
            layout.image = photo
            layout.imageTitle = selectRow.textNews.text
        } else {
            layout.image = #imageLiteral(resourceName: "background") // MARK : default photo
            layout.imageTitle = selectRow.textNews.text
        }
        
        let message = MSMessage()
        message.layout = layout
        activeConversation?.insert(message, completionHandler: nil)
        
    }
}

